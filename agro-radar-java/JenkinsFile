pipeline {
    agent any
    
    environment {
        // Ajustando o caminho para a raiz do workspace
        DOCKER_COMPOSE_FILE = '../docker-compose.yml'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build and Deploy') {
            steps {
                script {
                    // Verifica se docker-compose está instalado
                    sh 'which docker-compose || (echo "Docker Compose not found" && exit 1)'
                    
                    // Para containers existentes se houver
                    sh """
                        docker-compose -f ${DOCKER_COMPOSE_FILE} down || true
                    """
                    
                    // Constrói e inicia os serviços
                    sh """
                        docker-compose -f ${DOCKER_COMPOSE_FILE} build java
                        docker-compose -f ${DOCKER_COMPOSE_FILE} up -d java postgres mongo
                    """
                }
            }
        }
        
        stage('Health Check') {
            steps {
                script {
                    // Adiciona retry mais robusto para o health check
                    sh """
                        for i in \$(seq 1 6); do
                            if curl -s http://localhost:8080/actuator/health | grep -q "UP"; then
                                echo "Application is healthy"
                                exit 0
                            fi
                            echo "Waiting for application to become healthy (attempt \$i/6)..."
                            sleep 10
                        done
                        echo "Application failed to become healthy"
                        exit 1
                    """
                }
            }
        }
    }
    
    post {
        failure {
            script {
                // Em caso de falha, para e remove os containers
                sh """
                    docker-compose -f ${DOCKER_COMPOSE_FILE} down || true
                """
            }
        }
        success {
            script {
                echo "Pipeline completed successfully!"
            }
        }
        always {
            cleanWs()
        }
    }
}